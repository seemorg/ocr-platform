// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    reviewedPages Page[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Author {
    id         String @id @default(cuid())
    arabicName String
    books      Book[]
}

enum BookStatus {
    UNPROCESSED
    PROCESSING
    WAITING_FOR_REVIEW
    REVIEWED
}

model Book {
    id            String     @id @default(cuid())
    pdfUrl        String
    pages         Page[]
    totalPages    Int        @default(0)
    reviewedPages Int        @default(0)
    author        Author     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId      String
    status        BookStatus @default(UNPROCESSED)
}

model Page {
    id            String @id @default(cuid())
    pageNumber    Int?
    volumeNumber  Int?
    pdfPageNumber Int

    content   String? @db.Text
    footnotes String? @db.Text

    ocrContent   String  @db.Text
    ocrFootnotes String? @db.Text

    book         Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
    bookId       String
    reviewed     Boolean   @default(false)
    reviewedAt   DateTime?
    reviewedBy   User?     @relation(fields: [reviewedById], references: [id], onDelete: SetNull)
    reviewedById String?
}
